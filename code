import React, { useState } from "react";

export default function AIDebateJudge() {
  const [audio1, setAudio1] = useState(null);
  const [audio2, setAudio2] = useState(null);
  const [result, setResult] = useState(null);
  const [errorMsg, setErrorMsg] = useState("");

  const handleAudioUpload = (event, setter) => {
    const file = event.target.files[0];
    setter(file);
  };

  const analyzeDebate = async () => {
    if (!audio1 || !audio2) return alert("Please upload both audio files.");
    setErrorMsg("");

    const formData = new FormData();
    formData.append("speaker1", audio1);
    formData.append("speaker2", audio2);

    try {
      const response = await fetch("http://localhost:5000/analyze", {
        method: "POST",
        body: formData
      });
      if (!response.ok) {
        throw new Error(`Server responded with status ${response.status}`);
      }
      const data = await response.json();
      if (!data || !data.speaker1 || !data.speaker2) {
        throw new Error("Invalid response format from server");
      }
      setResult(data);
    } catch (error) {
      console.error("Error analyzing debate:", error);
      setErrorMsg("There was a problem analyzing the debate. Please make sure the backend is running and try again.");
    }
  };

  return (
    <div style={{ padding: '40px', fontFamily: 'Segoe UI, sans-serif', backgroundColor: '#f4f6f8', minHeight: '100vh' }}>
      <div style={{ maxWidth: '700px', margin: '0 auto', backgroundColor: '#fff', borderRadius: '12px', padding: '30px', boxShadow: '0 4px 12px rgba(0,0,0,0.1)' }}>
        <h1 style={{ fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '20px', color: '#1a202c' }}>üéôÔ∏è AI Debate Judge</h1>
        <p style={{ fontSize: '1rem', color: '#4a5568', marginBottom: '30px' }}>
          Upload audio files from two speakers. Our AI will evaluate clarity, logic, and emotion.
        </p>

        <div style={{ marginBottom: '20px' }}>
          <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold', color: '#2d3748' }}>Speaker 1 Audio:</label>
          <input type="file" accept="audio/*" onChange={(e) => handleAudioUpload(e, setAudio1)} style={{ width: '100%' }} />
        </div>

        <div style={{ marginBottom: '20px' }}>
          <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold', color: '#2d3748' }}>Speaker 2 Audio:</label>
          <input type="file" accept="audio/*" onChange={(e) => handleAudioUpload(e, setAudio2)} style={{ width: '100%' }} />
        </div>

        <button onClick={analyzeDebate} style={{ backgroundColor: '#3182ce', color: '#fff', padding: '10px 20px', fontSize: '1rem', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>
          Analyze Debate
        </button>

        {errorMsg && <p style={{ color: 'red', marginTop: '20px' }}>{errorMsg}</p>}

        {result && (
          <div style={{ marginTop: '40px' }}>
            <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#2d3748' }}>Debate Results</h2>
            <div style={{ display: 'flex', gap: '20px', marginTop: '20px' }}>
              <div style={{ flex: 1, backgroundColor: '#edf2f7', padding: '15px', borderRadius: '8px' }}>
                <h3 style={{ fontWeight: 'bold', marginBottom: '10px', color: '#2b6cb0' }}>Speaker 1</h3>
                <p>Clarity: {result.speaker1.clarity}</p>
                <p>Logic: {result.speaker1.logic}</p>
                <p>Emotion: {result.speaker1.emotion}</p>
              </div>
              <div style={{ flex: 1, backgroundColor: '#edf2f7', padding: '15px', borderRadius: '8px' }}>
                <h3 style={{ fontWeight: 'bold', marginBottom: '10px', color: '#2b6cb0' }}>Speaker 2</h3>
                <p>Clarity: {result.speaker2.clarity}</p>
                <p>Logic: {result.speaker2.logic}</p>
                <p>Emotion: {result.speaker2.emotion}</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
